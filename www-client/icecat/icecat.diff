3a4,5
> # Ebuild is based on the Firefox ebuilds in the main repo
> 
6c8,9
< FIREFOX_PATCHSET="firefox-78esr-patches-19.tar.xz"
---
> # Using Gentoos firefox patches as system libraries and lto are quite nice
> FIREFOX_PATCHSET="firefox-78esr-patches-18.tar.xz"
10c13
< PYTHON_COMPAT=( python3_{7..10} )
---
> PYTHON_COMPAT=( python3_{7..9} )
17,39d19
< MOZ_ESR=yes
< 
< MOZ_PV=${PV}
< MOZ_PV_SUFFIX=
< if [[ ${PV} =~ (_(alpha|beta|rc).*)$ ]] ; then
< 	MOZ_PV_SUFFIX=${BASH_REMATCH[1]}
< 
< 	# Convert the ebuild version to the upstream Mozilla version
< 	MOZ_PV="${MOZ_PV/_alpha/a}" # Handle alpha for SRC_URI
< 	MOZ_PV="${MOZ_PV/_beta/b}"  # Handle beta for SRC_URI
< 	MOZ_PV="${MOZ_PV%%_rc*}"    # Handle rc for SRC_URI
< fi
< 
< if [[ -n ${MOZ_ESR} ]] ; then
< 	# ESR releases have slightly different version numbers
< 	MOZ_PV="${MOZ_PV}esr"
< fi
< 
< MOZ_PN="${PN%-bin}"
< MOZ_P="${MOZ_PN}-${MOZ_PV}"
< MOZ_PV_DISTFILES="${MOZ_PV}${MOZ_PV_SUFFIX}"
< MOZ_P_DISTFILES="${MOZ_PN}-${MOZ_PV_DISTFILES}"
< 
44,49d23
< MOZ_SRC_BASE_URI="https://archive.mozilla.org/pub/${MOZ_PN}/releases/${MOZ_PV}"
< 
< if [[ ${PV} == *_rc* ]] ; then
< 	MOZ_SRC_BASE_URI="https://archive.mozilla.org/pub/${MOZ_PN}/candidates/${MOZ_PV}-candidates/build${PV##*_rc}"
< fi
< 
54,55c28,31
< SRC_URI="${MOZ_SRC_BASE_URI}/source/${MOZ_P}.source.tar.xz -> ${MOZ_P_DISTFILES}.source.tar.xz
< 	${PATCH_URIS[@]}"
---
> SRC_URI="
> 	!buildtarball? ( icecat-${PV}-gnu1.tar.bz2 )
> 	${PATCH_URIS[@]}
> "
57,58c33,34
< DESCRIPTION="Firefox Web Browser"
< HOMEPAGE="https://www.mozilla.com/firefox"
---
> DESCRIPTION="GNU IceCat Web Browser"
> HOMEPAGE="https://www.gnu.org/software/gnuzilla/"
60c36
< KEYWORDS="amd64 arm64 ~ppc64 x86"
---
> KEYWORDS="~amd64"
62c38
< SLOT="0/esr$(ver_cut 1)"
---
> SLOT="0"
64c40
< IUSE="+clang cpu_flags_arm_neon dbus debug eme-free geckodriver +gmp-autoupdate
---
> IUSE="+clang cpu_flags_arm_neon dbus debug +buildtarball geckodriver
90,97d65
< 			sys-devel/clang:12
< 			sys-devel/llvm:12
< 			clang? (
< 				=sys-devel/lld-12*
< 				pgo? ( =sys-libs/compiler-rt-sanitizers-12*[profile] )
< 			)
< 		)
< 		(
122c90,91
< 	)"
---
> 	)
> 	buildtarball? ( ~www-client/makeicecat-"${PV}"[buildtarball] )"
204,209d172
< # Allow MOZ_GMP_PLUGIN_LIST to be set in an eclass or
< # overridden in the enviromnent (advanced hackers only)
< if [[ -z "${MOZ_GMP_PLUGIN_LIST+set}" ]] ; then
< 	MOZ_GMP_PLUGIN_LIST=( gmp-gmpopenh264 gmp-widevinecdm )
< fi
< 
263,265d225
< 		SRC_URI+=" l10n_${xflag/[_@]/-}? ("
< 		SRC_URI+=" ${MOZ_SRC_BASE_URI}/linux-x86_64/xpi/${lang}.xpi -> ${MOZ_P_DISTFILES}-${lang}.xpi"
< 		SRC_URI+=" )"
267a228
> 
285a247,274
> moz_build_xpi() {
> 	debug-print-function ${FUNCNAME} "$@"
> 
> 	local MOZ_TOO_REGIONALIZED_FOR_L10N=(
> 		fy-NL ga-IE gu-IN hi-IN hy-AM nb-NO ne-NP nn-NO pa-IN sv-SE
> 	)
> 
> 	cd "${BUILD_DIR}"/browser/locales || die
> 	local lang xflag
> 	for lang in "${MOZ_LANGS[@]}"; do
> 		# en and en_US are handled internally
> 		if [[ ${lang} == en ]] || [[ ${lang} == en-US ]] ; then
> 			continue
> 		fi
> 
> 		# strip region subtag if $lang is in the list
> 		if has ${lang} "${MOZ_TOO_REGIONALIZED_FOR_L10N[@]}" ; then
> 			xflag=${lang%%-*}
> 		else
> 			xflag=${lang}
> 		fi
> 
> 		if use l10n_"${xflag}"; then
> 			emake langpack-"${lang}" LOCALE_MERGEDIR=.
> 		fi
> 	done
> }
> 
394a384,394
> pkg_nofetch() {
> 	if ! use buildtarball; then
> 		einfo "You have not enabled buildtarball use flag, therefore you will have to"
> 		einfo "build the tarball manually and place it in your distfiles directory."
> 		einfo "You may find the script for building the tarball here"
> 		einfo "https://git.savannah.gnu.org/cgit/gnuzilla.git/, but make sure it is the"
> 		einfo "right version."
> 		einfo "The output of the script should be icecat-"${PV}"-gnu1.tar.bz2"
> 	fi
> }
> 
465,482d464
< 		# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
< 		# Note: These are for Gentoo Linux use ONLY. For your own distribution, please
< 		# get your own set of keys.
< 		if [[ -z "${MOZ_API_KEY_GOOGLE+set}" ]] ; then
< 			MOZ_API_KEY_GOOGLE="AIzaSyDEAOvatFogGaPi0eTgsV_ZlEzx0ObmepsMzfAc"
< 		fi
< 
< 		if [[ -z "${MOZ_API_KEY_LOCATION+set}" ]] ; then
< 			MOZ_API_KEY_LOCATION="AIzaSyB2h2OuRgGaPicUgy5N-5hsZqiPW6sH3n_rptiQ"
< 		fi
< 
< 		# Mozilla API keys (see https://location.services.mozilla.com/api)
< 		# Note: These are for Gentoo Linux use ONLY. For your own distribution, please
< 		# get your own set of keys.
< 		if [[ -z "${MOZ_API_KEY_MOZILLA+set}" ]] ; then
< 			MOZ_API_KEY_MOZILLA="edb3d487-3a84-46m0ap1e3-9dfd-92b5efaaa005"
< 		fi
< 
486,488d467
< 
< 	CONFIG_CHECK="~SECCOMP"
< 	WARNING_SECCOMP="CONFIG_SECCOMP not set! This system will be unable to play DRM-protected content."
493,497c472,475
< 	local _lp_dir="${WORKDIR}/language_packs"
< 	local _src_file
< 
< 	if [[ ! -d "${_lp_dir}" ]] ; then
< 		mkdir "${_lp_dir}" || die
---
> 	if use buildtarball; then
> 		unpack /usr/src/makeicecat-"${PV}"/output/icecat-"${PV}"-gnu1.tar.bz2 || eerror "Tarball is missing, check that www-client/makeicecat has use flag buildtarball enabled."
> 	else
> 		unpack icecat-"${PV}"-gnu1.tar.bz2
499,506c477
< 
< 	for _src_file in ${A} ; do
< 		if [[ ${_src_file} == *.xpi ]]; then
< 			cp "${DISTDIR}/${_src_file}" "${_lp_dir}" || die "Failed to copy '${_src_file}' to '${_lp_dir}'!"
< 		else
< 			unpack ${_src_file}
< 		fi
< 	done
---
> 	unpack "${FIREFOX_PATCHSET}"
549,553d519
< 	# Write API keys to disk
< 	echo -n "${MOZ_API_KEY_GOOGLE//gGaPi/}" > "${S}"/api-google.key || die
< 	echo -n "${MOZ_API_KEY_LOCATION//gGaPi/}" > "${S}"/api-location.key || die
< 	echo -n "${MOZ_API_KEY_MOZILLA//m0ap1/}" > "${S}"/api-mozilla.key || die
< 
608,610d573
< 	# Set state path
< 	export MOZBUILD_STATE_PATH="${BUILD_DIR}"
< 
623a587
> 		--disable-eme \
636a601
> 		--with-l10n-base="${S}"/l10n \
647,651d611
< 	# Set update channel
< 	local update_channel=release
< 	[[ -n ${MOZ_ESR} ]] && update_channel=esr
< 	mozconfig_add_options_ac '' --update-channel=${update_channel}
< 
656,691d615
< 	if [[ -s "${S}/api-google.key" ]] ; then
< 		local key_origin="Gentoo default"
< 		if [[ $(cat "${S}/api-google.key" | md5sum | awk '{ print $1 }') != 709560c02f94b41f9ad2c49207be6c54 ]] ; then
< 			key_origin="User value"
< 		fi
< 
< 		mozconfig_add_options_ac "${key_origin}" \
< 			--with-google-safebrowsing-api-keyfile="${S}/api-google.key"
< 	else
< 		einfo "Building without Google API key ..."
< 	fi
< 
< 	if [[ -s "${S}/api-location.key" ]] ; then
< 		local key_origin="Gentoo default"
< 		if [[ $(cat "${S}/api-location.key" | md5sum | awk '{ print $1 }') != ffb7895e35dedf832eb1c5d420ac7420 ]] ; then
< 			key_origin="User value"
< 		fi
< 
< 		mozconfig_add_options_ac "${key_origin}" \
< 			--with-google-location-service-api-keyfile="${S}/api-location.key"
< 	else
< 		einfo "Building without Location API key ..."
< 	fi
< 
< 	if [[ -s "${S}/api-mozilla.key" ]] ; then
< 		local key_origin="Gentoo default"
< 		if [[ $(cat "${S}/api-mozilla.key" | md5sum | awk '{ print $1 }') != 3927726e9442a8e8fa0e46ccc39caa27 ]] ; then
< 			key_origin="User value"
< 		fi
< 
< 		mozconfig_add_options_ac "${key_origin}" \
< 			--with-mozilla-api-keyfile="${S}/api-mozilla.key"
< 	else
< 		einfo "Building without Mozilla API key ..."
< 	fi
< 
703,704d626
< 	use eme-free && mozconfig_add_options_ac '+eme-free' --disable-eme
< 
936a859,861
> 
> 	# Build language packs
> 	moz_build_xpi
960d884
< 	newins "${FILESDIR}"/disable-auto-update.policy.json policies.json
973a898,908
> 	# Set installDistroAddons to true so that language packs work
> 	cat >>"${GENTOO_PREFS}" <<-EOF || die "failed to set extensions.installDistroAddons pref"
> 	pref("extensions.installDistroAddons",     true);
> 	pref("extensions.langpacks.signatures.required",	false);
> 	EOF
> 
> 	# Disable signatures for language packs so that unsigned just built language packs work
> 	cat >>"${GENTOO_PREFS}" <<-EOF || die "failed to disable langpacks signatures"
> 	pref("extensions.langpacks.signatures.required",	false);
> 	EOF
> 
981,990d915
< 	if ! use gmp-autoupdate ; then
< 		local plugin
< 		for plugin in "${MOZ_GMP_PLUGIN_LIST[@]}" ; do
< 			einfo "Disabling auto-update for ${plugin} plugin ..."
< 			cat >>"${GENTOO_PREFS}" <<-EOF || die "failed to disable autoupdate for ${plugin} media plugin"
< 			pref("media.${plugin}.autoupdate",   false);
< 			EOF
< 		done
< 	fi
< 
999c924
< 	local langpacks=( $(find "${WORKDIR}/language_packs" -type f -name '*.xpi') )
---
> 	local langpacks=( $(find "${BUILD_DIR}"/dist/linux-x86_64/xpi -type f -name '*.xpi') )
1001c926
< 		moz_install_xpi "${MOZILLA_FIVE_HOME}/distribution/extensions" "${langpacks[@]}"
---
> 		moz_install_xpi "${MOZILLA_FIVE_HOME}/browser/extensions" "${langpacks[@]}"
1016c941
< 	local icon_symbolic_file="${FILESDIR}/icon/firefox-symbolic.svg"
---
> 	local icon_symbolic_file="${FILESDIR}/icon/"${PN}"-symbolic.svg"
1019c944
< 	newins "${icon_symbolic_file}" ${PN}-symbolic.svg
---
> 	newins "${icon_symbolic_file}" "${PN}"-symbolic.svg
1039c964
< 	local name="Mozilla ${MOZ_PN^}"
---
> 	local name="GNU IceCat"
1134,1142c1059,1063
< 	if ! use gmp-autoupdate ; then
< 		elog "USE='-gmp-autoupdate' has disabled the following plugins from updating or"
< 		elog "installing into new profiles:"
< 		local plugin
< 		for plugin in "${MOZ_GMP_PLUGIN_LIST[@]}" ; do
< 			elog "\t ${plugin}"
< 		done
< 		elog
< 	fi
---
> 	elog "Cloudflare browser checks are broken with GNU IceCats anti fingerprinting measures."
> 	elog "You can fix cloudflare browser checks by undoing them in about:config like below:"
> 	elog "   general.appversion.override: 78.0 (X11)"
> 	elog "   general.oscpu.override: Linux x86_64"
> 	elog "   general.platform.override: Linux x86_64"
1149,1196d1069
< 	fi
< 
< 	local show_doh_information show_normandy_information
< 
< 	if [[ -z "${REPLACING_VERSIONS}" ]] ; then
< 		# New install; Tell user that DoH is disabled by default
< 		show_doh_information=yes
< 		show_normandy_information=yes
< 	else
< 		local replacing_version
< 		for replacing_version in ${REPLACING_VERSIONS} ; do
< 			if ver_test "${replacing_version}" -lt 70 ; then
< 				# Tell user only once about our DoH default
< 				show_doh_information=yes
< 			fi
< 
< 			if ver_test "${replacing_version}" -lt 74.0-r2 ; then
< 				# Tell user only once about our Normandy default
< 				show_normandy_information=yes
< 			fi
< 		done
< 	fi
< 
< 	if [[ -n "${show_doh_information}" ]] ; then
< 		elog
< 		elog "Note regarding Trusted Recursive Resolver aka DNS-over-HTTPS (DoH):"
< 		elog "Due to privacy concerns (encrypting DNS might be a good thing, sending all"
< 		elog "DNS traffic to Cloudflare by default is not a good idea and applications"
< 		elog "should respect OS configured settings), \"network.trr.mode\" was set to 5"
< 		elog "(\"Off by choice\") by default."
< 		elog "You can enable DNS-over-HTTPS in ${PN^}'s preferences."
< 	fi
< 
< 	# bug 713782
< 	if [[ -n "${show_normandy_information}" ]] ; then
< 		elog
< 		elog "Upstream operates a service named Normandy which allows Mozilla to"
< 		elog "push changes for default settings or even install new add-ons remotely."
< 		elog "While this can be useful to address problems like 'Armagadd-on 2.0' or"
< 		elog "revert previous decisions to disable TLS 1.0/1.1, privacy and security"
< 		elog "concerns prevail, which is why we have switched off the use of this"
< 		elog "service by default."
< 		elog
< 		elog "To re-enable this service set"
< 		elog
< 		elog "    app.normandy.enabled=true"
< 		elog
< 		elog "in about:config."
